//#define SELECTED 0xB0
#define SELECTED 0x31

// define a 2x2 metasprite
#define DEF_METASPRITE_2x2(name, code, attribute)\
  unsigned char name[]={\
          0,      0,      (code)+0,   attribute, \
          0,      8,      (code)+1,   attribute, \
          8,      0,      (code)+2,   attribute, \
          8,      8,      (code)+3,   attribute, \
          128}; //128 = number of bits



//long BOIS
#define DEF_METASPRITE_4x1(name, code, attribute)\
 unsigned char name[]={\
 	  0,      0,      (code),   attribute, \
          8,      0,      (code),   attribute, \
          16,      0,      (code),   attribute, \
          24,      0,      (code),   attribute, \
          128};

#define WORLD_WIDTH 240*2
#define WORLD_HEIGHT 256

#define NUM_SHADOW_ROW 30
#define NUM_SHADOW_COL 32

#define BYTE_PER_COL 32

#define attackButton 0x01

int outsideHelper; //used for debugging
int outsideHelper2;
int outsideHelper3;

#define SHADOW_SIZE (NUM_SHADOW_ROW * NUM_SHADOW_COL)/4
char shadow[SHADOW_SIZE];

byte UpTo8DoorsOpen = 0;
//8*2char's 
char DoorInfo[8];
char StairsGoToWorld[8];
char DoorPositions[16];
byte numDoors;

//each bit represents one door, ordered left to right up down.

#define MAX_JUMP 7
int jumpTable[MAX_JUMP] = 
{
  -4, -2, -1, 0, 1, 2, 4
  };

#define MAX_Charge 9
int chargeTable[MAX_Charge] = 
{
  1, 2, 2, 3, 3, 4, 5, 6, 7,
};

#define NUM_BRICKS 16

#define NumWorlds 2
#define LargestWorld NUM_SHADOW_ROW * NUM_SHADOW_COL
int world_x = 0;
int world_y = 0;
char worldNumber;
byte old_worldNumber;
char transition;
byte scrollSwap;
byte worldScrolling;
byte old_worldScrolling = false;

byte brightness = 4;

byte numBombs = 0;
byte numBlocks = 0;
byte numLives = 1;

#define pastHereBeBlocks 0x70
#define door 0xC4
#define stairs 0xD8
#define dust 0x32
//#define dust 0x80

char selectedPosition[3];
const char playerPlaceBlock = 0xC0;
char groundBlock[6];

//5 metasprites per entity....
#define NUM_ANIMATIONS 5
#define NUM_DIFF_METAACTORS 2
#define extraneous 1
#define numOfMetaSprites (NUM_ANIMATIONS*NUM_DIFF_METAACTORS) +extraneous
char * MetaTable[numOfMetaSprites];

//DEF_METASPRITE_2x2(PlayerMetaSprite, 0xD8, 0);
DEF_METASPRITE_2x2(PlayerMetaSprite, 0x00, 0);
DEF_METASPRITE_2x2(PlayerMetaSprite_Attack_1, 0x08, 0);
DEF_METASPRITE_2x2(PlayerMetaSprite_Attack_2, 0x0C, 0);
DEF_METASPRITE_2x2(PlayerMetaSprite_Jump, 0x10, 0);
DEF_METASPRITE_2x2(PlayerMetaSprite_Run, 0x04, 0);

DEF_METASPRITE_2x2(ChainChomp_stand, 0x20, 0);
DEF_METASPRITE_2x2(ChainChomp_Attack_1, 0x28, 0);
DEF_METASPRITE_2x2(ChainChomp_Attack_2, 0x2C, 0);
DEF_METASPRITE_2x2(ChainChomp_Jump, 0x24, 0);
DEF_METASPRITE_2x2(ChainChomp_Run, 0x1C, 0);

DEF_METASPRITE_4x1(longChain, 0x30, 0);
//DEF_METASPRITE_4x1(longChain, 0x30, 0);

Actor player;
Actor boss;
Actor chain;

//since a metaactor takes up 4 of our max 60 num sprites
#define NumActors 60 - (3*NUM_DIFF_METAACTORS) - NUM_BRICKS
Actor * allActors[NumActors];

byte bossSpawnedTracker = 0;
byte spawnBoss = false;
byte bossNumber = 0;
byte justKilledBoss = false;
byte chargeTimer = 0;
//byte BossAttacking = false;

//
int Up_Down = 1; //minning up or down, or straight ahead
int leftRight = 1;
byte lastTouch = 0; //gives the player leeway - 10 frames to let go of shift, otherwise it will continually register
byte resetTouch = 0;
const byte waitTouch = 5;
short digTimer = 0; //player only timers
short digWait = 3;
byte change = 0;
byte playerLost = false;
//player variables

byte timeBetweenFall = 2; //how long to hold falling animation

Particles singleBricks[NUM_BRICKS];
unsigned char numActive = 0; //break block particles
short brickSpeed = 5; //speed of particles
short brickLifetime = 10; //lifetime of particles

//960 is the largest map size...
const char worldData[NumWorlds][LargestWorld] = {
  {
    0x01,0x00,0x01,0x20,0x87,0x83,0x01,0x1b,0x8b,0x00,0x00,0x85,0x48,0x50,0x00,0x15,
    0x01,0x09,0x00,0x19,0x78,0x30,0x30,0x00,0xb2,0x78,0x30,0x30,0x00,0xb1,0x78,0x30,
    0x31,0x8a,0x00,0x00,0x83,0x01,0x1d,0x00,0x01,0x0f,0x0f,0x01,0x03,0x00,0x01,0x05,
    0x03,0x01,0x02,0x00,0x01,0x12,0x0f,0x0e,0x0e,0x0f,0x0f,0x00,0x01,0x04,0x03,0x01,
    0x03,0x00,0x01,0x11,0x0f,0x0e,0x01,0x02,0x0f,0x0f,0x00,0x01,0x02,0x03,0x01,0x04,
    0x00,0x01,0x11,0x0f,0x0e,0x01,0x03,0x0f,0x00,0x01,0x02,0x03,0x03,0x0f,0x01,0x02,
    0x00,0x01,0x11,0x0f,0x0e,0x01,0x03,0x0f,0x00,0x01,0x02,0x03,0x03,0x0f,0x0e,0x0f,
    0x0f,0x00,0x01,0x10,0x0f,0x0e,0x01,0x03,0x0f,0x00,0x00,0x03,0x03,0x02,0x0f,0x0e,
    0x0e,0x0f,0x0f,0x00,0x01,0x0f,0x0f,0x0f,0x0e,0x01,0x02,0x0f,0x00,0x03,0x03,0x02,
    0x03,0x0f,0x0e,0x01,0x02,0x0f,0x00,0x01,0x10,0x0f,0x0e,0x01,0x02,0x0f,0x03,0x01,
    0x02,0x02,0x02,0x0f,0x0e,0x01,0x02,0x0f,0x00,0x01,0x10,0x0f,0x0e,0x01,0x02,0x0f,
    0x02,0x03,0x02,0x01,0x02,0x0f,0x0e,0x01,0x02,0x0f,0x00,0x01,0x10,0x0f,0x0e,0x01,
    0x02,0x0f,0x02,0x01,0x04,0x0f,0x0e,0x01,0x02,0x0f,0x00,0x01,0x0f,0x03,0x0f,0x0e,
    0x01,0x02,0x0f,0x01,0x06,0x0e,0x01,0x02,0x0f,0x00,0x01,0x0e,0x03,0x03,0x0f,0x0e,
    0x01,0x0c,0x0f,0x00,0x01,0x0e,0x03,0x03,0x0f,0x0e,0x01,0x0b,0x0f,0x0f,0x00,0x01,
    0x0e,0x03,0x03,0x0f,0x0e,0x01,0x0b,0x0f,0x02,0x00,0x01,0x0d,0x03,0x02,0x03,0x0f,
    0x0e,0x01,0x04,0xc4,0xc6,0x0e,0x01,0x04,0x0f,0x02,0x00,0x01,0x04,0x03,0x03,0x00,
    0x01,0x06,0x02,0x03,0x02,0x0f,0x0e,0x01,0x04,0xc5,0xc7,0x0e,0x01,0x04,0x0f,0x02,
    0x00,0x01,0x04,0x03,0x03,0x00,0x01,0x05,0x02,0x01,0x03,0xc1,0x01,0x0c,0x0f,0x02,
    0x00,0x01,0x03,0x03,0x01,0x05,0x00,0x01,0x02,0x02,0x01,0x02,0xc1,0x01,0x0e,0x02,
    0x00,0x01,0x03,0x03,0x02,0x02,0x03,0x01,0x03,0x00,0x00,0x02,0xc1,0x01,0x10,0x02,
    0x00,0x01,0x03,0x02,0x03,0x02,0x01,0x03,0x03,0x03,0x02,0x02,0xc1,0x01,0x11,0x00,
    0x01,0x02,0x02,0x01,0x09,0xc1,0x01,0x12,0x00,0x01,0x02,0x02,0x01,0x06,0xc1,0x01,
    0x15,0x00,0x00,0x02,0x01,0x02,0xc1,0x01,0x1a,0x00,0xc0,0x01,0x1f,0x00,0x01,0x3e,
    0x00,0x01,0x00
    },

  {
    0x01,0x00,0x01,0x20,0x87,0x83,0x01,0x1b,0x8b,0x00,0x00,0x85,0x48,0x50,0x00,0x15,
    0x01,0x09,0x00,0x19,0x78,0x30,0x30,0x00,0xb2,0x78,0x30,0x30,0x00,0xb1,0x78,0x30,
    0x31,0x8a,0x00,0x00,0x83,0x01,0x1d,0x00,0x01,0x51,0x04,0x01,0x02,0x00,0x01,0x1b,
    0x04,0x01,0x03,0x00,0x01,0x1a,0x04,0x01,0x05,0x00,0x04,0x01,0x02,0x00,0x01,0x15,
    0x04,0x01,0x02,0x02,0x04,0x01,0x08,0x00,0x01,0x0f,0x04,0x01,0x05,0x02,0x04,0x01,
    0x08,0x00,0x01,0x0e,0x04,0x01,0x06,0x02,0x02,0x04,0x01,0x07,0x00,0x01,0x0e,0x04,
    0x01,0x02,0x02,0x02,0x04,0x04,0x02,0x02,0x04,0x01,0x02,0x02,0x04,0x01,0x02,0x00,
    0x01,0x10,0x04,0x01,0x02,0x02,0x02,0x04,0x01,0x08,0x00,0x01,0x11,0x04,0x01,0x02,
    0x02,0x04,0x01,0x05,0x02,0x04,0x01,0x02,0x00,0x01,0x11,0x04,0x01,0x02,0x02,0x02,
    0x04,0x02,0x01,0x05,0x04,0x00,0x01,0x13,0x04,0x01,0x03,0x02,0x01,0x04,0x00,0x01,
    0x1b,0x02,0x02,0x00,0x01,0x1d,0x02,0x02,0x00,0x01,0x1d,0x02,0x02,0x00,0x01,0x1a,
    0x06,0x01,0x03,0x02,0x00,0x01,0x19,0x06,0x01,0x0b,0x00,0x01,0x11,0x09,0x06,0x01,
    0x0d,0x00,0x01,0x0e,0x09,0x01,0x03,0x06,0x06,0x0f,0x06,0x01,0x08,0x09,0x01,0x02,
    0x00,0x01,0x09,0x09,0x01,0x02,0x06,0x01,0x04,0x0f,0x01,0x02,0x06,0x01,0x09,0x09,
    0x09,0x00,0x01,0x02,0xc4,0xc6,0x00,0x01,0x02,0x09,0x09,0x0f,0x06,0x01,0x02,0x0f,
    0x01,0x06,0x06,0x01,0x03,0x09,0x09,0x06,0x06,0x0f,0x01,0x03,0x00,0x00,0xc5,0xc7,
    0x00,0x00,0x0f,0x01,0x0d,0x06,0x01,0x02,0x0f,0x01,0x08,0x00,0xc0,0x01,0x1f,0x00,
    0x01,0x3e,0x00,0x01,0x00
    }
};

const char PALETTE[32] = 
{
  0x03, // screen color
  0x24, 0x16, 0x20, 0x0,// background palette 0
  0x1c, 0x20, 0x2c, 0x0,// background palette 1
  0x00, 0x1a, 0x20, 0x0,// background palette 2
  0x00, 0x1a, 0x20, 0x0,// background palette 3

  0x3F, 0x3F, 0x22, 0x0,// sprite palette 0
  0x00, 0x37, 0x25, 0x0,// sprite palette 1
  0x36, 0x21, 0x19, 0x0,// sprite palette 2
  0x1d, 0x37, 0x2b,// sprite palette 3
};

const int note_table[64] = 
{
  2152,
  4063,3835,3620,3417,3225,
  3044,2873,2712,2560,2416,2280,
  2152,2032,1918,1810,1708,1612,
  1522,1437,1356,1280,1208,1140,
  1076,1016,959,905,854,806,761,
  718,678,640,604,570,538,508,479,
  452,427,403,380,359,339,320,302,
  285,269,254,240,226,214,202,190,
  180,169,160,151,143,135,127,120,
  113,
};

const int triangle_note[] =
{
2138, 2018, 1905, 1798, 1697, 1602, 1512, 1427,
1347, 1272, 1200, 1133, 1069, 1009, 953, 899,
849, 801, 756, 714, 674, 636, 601, 567,
535, 505, 477, 450, 425, 401, 379, 358,
338, 319, 301, 284, 268, 243, 239, 226,
213, 201, 190, 179, 169, 160, 151, 142,
135, 127, 120, 113, 107, 101, 95, 90,
85, 80, 76, 68, 64, 60, 57
};

const char MainTheme[] = 
{
  0x05,0x8a,0x0a,0x89,0x0c,
  0x8a,0x07,0x93,0x05,0x8a,
  0x07,0x89,0x0a,0x8a,0x07,
  0x93,0x0a,0x8a,0x0c,0x89,
  0x0a,0x8a,0x0f,0x89,0x0f,
  0x8a,0x07,0x8a,0x07,0x89,
  0x07,0x8a,0x07,0x93,0x0a,
  0x93,0x07,0x8a,0x0a,0x89,
  0x05,0x94,0x07,0x89,0x07,
  0x8a,0x07,0x89,0x07,0x8a,
  0x0a,0x93,0x05,0x8a,0x0a,
  0x8a,0x0c,0x89,0x07,0x93,
  0x05,0x8a,0x07,0x8a,0x0a,
  0x89,0x07,0x93,0x0a,0x8a,
  0x0c,0x8a,0x0a,0x89,0x0f,
  0x8a,0x0f,0x89,0x07,0x8a,
  0x07,0x8a,0x07,0x89,0x07,
  0x93,0x0a,0x94,0x07,0x89,
  0x0a,0x8a,0x05,0x93,0x07,
  0x8a,0x07,0x89,0x07,0x8a,
  0x07,0x89,0x0a,0xff
  };

